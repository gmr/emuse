[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "emuse"
dynamic = ["version"]
description = "Sourcee for emuse.org"
authors = [{ name = "Gavin M. Roy", email = "gavinmroy@gmail.com" }]
readme = "README.md"
requires-python = ">=3.12"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Framework :: FastAPI",
    "License :: OSI Approved :: BSD License",
    "Natural Language :: English",
    "Private :: Do Not Upload",
    "Programming Language :: Python :: 3.12",
]
dependencies = [
    "fastapi[standard]",
    "google-auth",
    "httpx",
    "jinja2",
    "logfire[fastapi,httpx,psycopg]",
    "psycopg[pool]",
    "pydantic[email,timezone]",
    "pydantic_extra_types",
    "pydantic_settings",
    "pyyaml",
    "uuid-utils",
    "uvicorn",
    "yarl"
]

[project.optional-dependencies]
dev = [
    "build",
    "coverage",
    "ruff"
]

[project.scripts]
emuse = "emuse.main:main"

[tool.coverage.run]
branch = true
source = ["emuse"]
command_line = "-m unittest discover tests --buffer --verbose"

[tool.coverage.report]
exclude_also = [
  "typing.TYPE_CHECKING"
]
omit = [
  "emuse/dev.py"
]
fail_under = 90
show_missing = true

[tool.coverage.html]
directory = "build/coverage"

[tool.coverage.xml]
output = "build/reports/coverage.xml"

[tool.hatch.build]
artifacts = [
    "/emuse/log-config.yaml",
    "/emuse/static/*",
    "/emuse/templates/*"
]

[tool.hatch.build.targets.wheel]
include = [
    "emuse",
    "emuse.endpoints",
    "emuse.models"
]

[tool.hatch.env.default]
python = "python3.12"
features = ["testing"]

[tool.hatch.version]
path = "emuse/__version__.py"

[tool.logfire]
project_name = "emuse"
service_name = "emuse"
dynamic = ["version"]
ignore_no_config = true
console_colors = "never"
console = false

[tool.logfire.code_source]
repository = "https://github.com/gmr/emuse"

[tool.ruff]
line-length = 79
target-version = "py312"

[tool.ruff.lint]
select = [
    "ASYNC",  # flake8-async
    "B",      # flake8-bugbear
    "BLE",    # flake8-blind-except
    "C4",     # flake8-comprehensions
    "DTZ",    # flake8-datetimez
    "E", "W", # pycodestyle
    "F",      # pyflakes
    "G",      # flake8-logging-format
    "I",      # isort
    "S",      # flake8-bandit
    "T20",    # flake8-print
    "UP",     # pyupgrade
    "F401",   # unused imports
    "F841",   # unused variables
    "B027",   # empty method in abstract base class
    "B905",   # zip() without explicit strict parameter
]
ignore = [
  "RSE",      # contradicts Python Style Guide
]
flake8-quotes = { inline-quotes = "single" }

[tool.yapf]
allow_split_before_dict_value = false
indent_dictionary_value = true
